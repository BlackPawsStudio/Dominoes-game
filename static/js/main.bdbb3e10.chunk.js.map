{"version":3,"sources":["store/reduxFunctions/diceFunctions.ts","store/reduxFunctions/playerFunctions.ts","store/dominoSlice.ts","store/reduxFunctions/gameFunctions.ts","store/store.ts","components/Dice.tsx","components/Table.tsx","components/Pile.tsx","store/hooks.ts","components/Player.tsx","components/Message.tsx","components/Settings.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["getHighestDice","dices","newDices","map","el","Math","max","getRandomDice","pile","min","dieN","length","trunc","random","ret","splice","pickDice","player","dice","push","pickDices","players","cardsAmount","i","forEach","findAvailable","available","find","availableNumbers","allDetails","dominoSlice","createSlice","name","initialState","playersAmount","id","table","message","playerQueue","playerTurn","isGameOver","isGamePaused","skipCount","moveSpeed","reducers","initFill","state","j","newDice","fillPile","fillPlayers","sort","a","b","changePlayers","payload","startGame","resetGame","playerMove","switchPlayer","nextPlayerId","indexOf","undefined","currPlayer","availableDice","availableDiceID","concat","newTable","availableNums","allVariants","unshift","addToTable","JSON","stringify","alert","changeSpeed","pauseGame","actions","rootReducer","combineReducers","store","configureStore","reducer","DicePiece","data","first","second","className","Array","fill","_","Table","diceData","Pile","useState","opened","setOpened","onClick","useAppDispatch","useDispatch","useAppSelector","useSelector","Player","toolkit","speed","isPaused","dispatch","useEffect","setTimeout","Message","text","Settings","delay","disabled","onChange","e","target","value","type","defaultValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementsByClassName"],"mappings":"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","file":"static/js/main.bdbb3e10.chunk.js","sourcesContent":["import { Dice } from '../../types';\r\n\r\nexport const getRandom = (max:number, min:number):number => Math.trunc(Math.random() * (max - min) + min);\r\n\r\nexport const getHighestDice = (dices:Dice[]):number => {\r\n  const newDices = dices.map((el) => el[0] + el[1]);\r\n  return Math.max(...newDices);\r\n};\r\n\r\nexport const getRandomDice = (pile:Dice[]):Dice => {\r\n  const dieN = getRandom(pile.length, 0);\r\n  const ret = pile[dieN];\r\n  pile.splice(dieN, 1);\r\n  return ret;\r\n};\r\n","import { Dice, Player, Available, Pile } from '../../types';\r\nimport { getRandomDice } from './diceFunctions';\r\n\r\nexport const fillPlayers = (playersAmount:number, pile:Pile):Player[] => {\r\n  const players:Player[] = [];\r\n  for (let i = 0; i < playersAmount; i++) {\r\n    players.push({\r\n      id: i,\r\n      dice: [],\r\n    });\r\n  }\r\n  const cardsAmount = playersAmount < 4 ? 7 : 5;\r\n  pickDices(players, pile, cardsAmount);\r\n  return players;\r\n};\r\n\r\nconst pickDice = (player:Player, pile:Dice[]):void => {\r\n  player.dice.push(getRandomDice(pile));\r\n};\r\n\r\nconst pickDices = (players:Player[], pile:Dice[], cardsAmount:number):void => {\r\n  for (let i = 0; i < cardsAmount; i++) {\r\n    players.forEach((el) => pickDice(el, pile));\r\n  }\r\n};\r\n\r\nexport const findAvailable = (available:Available, dice:Dice[]):Dice | undefined => {\r\n  return dice.find(el => (el[0] === available[0]\r\n      || el[0] === available[1]\r\n      || el[1] === available[0]\r\n      || el[1] === available[1]))\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Available, Dice } from \"../types\";\r\nimport { getHighestDice, getRandomDice } from \"./reduxFunctions/diceFunctions\";\r\nimport { fillPile } from \"./reduxFunctions/gameFunctions\";\r\nimport { fillPlayers, findAvailable } from \"./reduxFunctions/playerFunctions\";\r\n\r\nconst availableNumbers = (allDetails: Dice[]): Available => {\r\n  const leftAvailablePlace = allDetails[0][0];\r\n  const rightAvailablePlace = allDetails[allDetails.length - 1][1];\r\n  return [leftAvailablePlace, rightAvailablePlace];\r\n};\r\n\r\nconst addToTable = (table: Dice[], dice: Dice): Dice[] => {\r\n  const newTable = table;\r\n  const availableNums = availableNumbers(table);\r\n  const reversedDice: Dice = [dice[1], dice[0]];\r\n  const allVariants: Dice[] = [dice, reversedDice];\r\n  for (let i = 0; i < allVariants.length; i++) {\r\n    if (allVariants[i][0] === availableNums[1]) {\r\n      newTable.push(allVariants[i]);\r\n      break;\r\n    } else if (allVariants[i][1] === availableNums[0]) {\r\n      newTable.unshift(allVariants[i]);\r\n      break;\r\n    }\r\n  }\r\n  return newTable;\r\n};\r\n\r\nconst dominoSlice = createSlice({\r\n  name: \"domino\",\r\n  initialState: {\r\n    pile: [] as Dice[],\r\n    playersAmount: 2,\r\n    players: [\r\n      {\r\n        id: 0,\r\n        dice: [] as Dice[],\r\n      },\r\n    ],\r\n    table: [] as Dice[],\r\n    message: \"\",\r\n    playerQueue: [] as number[],\r\n    playerTurn: { id: 0 },\r\n    isGameOver: true,\r\n    isGamePaused: false,\r\n    skipCount: 0,\r\n    moveSpeed: 1500,\r\n  },\r\n  reducers: {\r\n    initFill(state) {\r\n      state.pile = fillPile();\r\n      state.table = [];\r\n      state.table.push(getRandomDice(state.pile));\r\n      state.players = [];\r\n      state.players = fillPlayers(state.playersAmount, state.pile);\r\n      state.players.sort((a, b) =>\r\n        getHighestDice(a.dice) < getHighestDice(b.dice) ? 1 : -1\r\n      );\r\n      state.playerQueue = state.players.map((el) => el.id);\r\n      state.message = \"Everything is up and ready\";\r\n    },\r\n    changePlayers(state, { payload }) {\r\n      state.playersAmount = payload;\r\n    },\r\n    startGame(state) {\r\n      state.isGamePaused = false;\r\n      state.isGameOver = !state.isGameOver;\r\n      state.playerTurn = { id: state.playerQueue[0] };\r\n    },\r\n    resetGame(state) {\r\n      state.isGamePaused = true;\r\n      state.isGameOver = true;\r\n      state.playerTurn = { id: state.playerQueue[0] };\r\n    },\r\n    playerMove(state, { payload }) {\r\n      const switchPlayer = () => {\r\n        const nextPlayerId = state.playerQueue.indexOf(state.playerTurn.id) + 1;\r\n        state.playerTurn = { id: state.playerQueue[nextPlayerId] };\r\n\r\n        if (state.playerTurn.id === undefined) {\r\n          state.playerTurn = { id: state.playerQueue[0] };\r\n        }\r\n      };\r\n\r\n      const currPlayer =\r\n        state.players[state.playerQueue.indexOf(state.playerTurn.id)];\r\n      let availableDice = findAvailable(\r\n        availableNumbers(state.table),\r\n        payload.dice\r\n      );\r\n      if (!availableDice) {\r\n        if (state.pile.length === 0) {\r\n          state.message = `Pile now is empty, player ${payload.id}'s skipping`;\r\n          state.skipCount++;\r\n          if (state.skipCount === state.players.length) {\r\n            state.isGamePaused = true;\r\n            alert(`No legal moves! Draw!`);\r\n          }\r\n          switchPlayer();\r\n        } else {\r\n          const newDice = payload.dice.concat();\r\n          newDice.unshift(getRandomDice(state.pile));\r\n          currPlayer.dice = newDice;\r\n\r\n          state.message = `Player ${payload.id} picked ${JSON.stringify(\r\n            payload.dice[0]\r\n          )}`;\r\n          availableDice = findAvailable(\r\n            availableNumbers(state.table),\r\n            payload.dice\r\n          );\r\n          state.playerTurn = { id: currPlayer.id };\r\n        }\r\n      } else {\r\n        const availableDiceID = payload.dice.indexOf(availableDice);\r\n\r\n        const newDice = payload.dice.concat();\r\n        newDice.splice(availableDiceID, 1);\r\n        currPlayer.dice = newDice;\r\n\r\n        state.table = addToTable(state.table, availableDice as Dice);\r\n        state.message = `Player ${payload.id} played ${JSON.stringify(\r\n          availableDice\r\n        )}`;\r\n        state.skipCount = 0;\r\n\r\n        if (currPlayer.dice.length === 0) {\r\n          state.isGamePaused = true;\r\n          alert(`Player ${payload.id} wins!`);\r\n        }\r\n\r\n        switchPlayer();\r\n      }\r\n    },\r\n    changeSpeed(state, { payload }) {\r\n      state.moveSpeed = 5000 - payload;\r\n    },\r\n    pauseGame(state) {\r\n      state.isGamePaused = !state.isGamePaused;\r\n    },\r\n  },\r\n});\r\n\r\nexport default dominoSlice.reducer;\r\nexport const {\r\n  initFill,\r\n  changePlayers,\r\n  startGame,\r\n  resetGame,\r\n  playerMove,\r\n  changeSpeed,\r\n  pauseGame,\r\n} = dominoSlice.actions;\r\n","import {\r\n  Dice,\r\n} from '../../types';\r\n// import { getRandomDice } from './diceFunctions';\r\n// import { findAvailable } from './playerFunctions';\r\n\r\nexport const fillPile = ():Dice[] => {\r\n  const pile:Dice[] = [];\r\n  for (let i = 0; i <= 6; i++) {\r\n    for (let j = 0; j <= i; j++) {\r\n      const newDice:Dice = [i, j];\r\n      pile.push(newDice);\r\n    }\r\n  }\r\n  return pile;\r\n};\r\n // const playerMove = (player:Player, table:Dice[], pile:Pile):Promise<boolean> => new Promise(resolve => {\r\n      //   let availableDice = findAvailable(availableNumbers(table), player.dice);\r\n      //   if (!availableDice) {\r\n      //     while (!availableDice) {\r\n      //       if (pile.length === 0) {\r\n      //         state.message = `Pile now is empty, player ${player.id}'s skipping`;\r\n      //         resolve(true);\r\n      //       }\r\n      //       player.dice.unshift(getRandomDice(pile));\r\n      //       state.message = `Player ${player.id} picked ${JSON.stringify(player.dice[0])}`;\r\n      //       availableDice = findAvailable(availableNumbers(table), player.dice);\r\n      //     }\r\n      //   }\r\n      //   const availableDiceID = player.dice.indexOf(availableDice);\r\n      //   player.dice.splice(availableDiceID, 1);\r\n      //   addToTable(table, availableDice);\r\n      //   state.message = `Player ${player.id} played ${JSON.stringify(availableDice)}`;\r\n      //   resolve(false);\r\n      // });\r\n\r\n      // let skipCount = 0\r\n\r\n      // while (!state.isGameOver) {\r\n      //   for (let i = 0; i < state.players.length; i++) {\r\n      //     const isSkip = playerMove(state.players[i], state.table, state.pile);\r\n      //     isSkip.then(isSkip => {\r\n      //       console.log(isSkip);\r\n      //       if (isSkip) {\r\n      //         skipCount++;\r\n      //         if (skipCount === state.players.length) {\r\n      //           state.message = 'Draw!!';\r\n      //           state.isGameOver = true;\r\n      //         }\r\n      //       } else if (state.players[i].dice.length === 0) {\r\n      //         state.message = `Player ${state.players[i].id + 1} wins!!`;\r\n      //         state.isGameOver = true;\r\n      //       } else {\r\n      //         skipCount = 0;\r\n      //       }\r\n      //     })\r\n      //   }\r\n      // }\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport dominoSlice from './dominoSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  dominoSlice: dominoSlice\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import { Dice } from \"../types\"\r\n\r\nexport const DicePiece = ({data: [first, second]}:{data: Dice}) => {\r\n  return (\r\n    <div className=\"dice\">\r\n      <div className=\"dice__dots\">\r\n        {new Array(first).fill(\"\").map((_, id) => (\r\n          <span className=\"dice__dots__dot\" key={id}></span>\r\n        ))}\r\n      </div>\r\n      <span className=\"dice__separator\"></span>\r\n      <div className=\"dice__dots\">\r\n        {new Array(second).fill(\"\").map((_, id) => (\r\n          <span className=\"dice__dots__dot\" key={id}></span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { DicePiece } from \"./Dice\"\r\nimport { Dice } from \"../types\"\r\n\r\nexport const Table = ({diceData}:{diceData: Dice[]}) => {\r\n  return (\r\n    <div className=\"table\">\r\n      <h3 className=\"table__text\">Table:</h3>\r\n      <div className=\"table__dice\">\r\n        {diceData.map((el, id) => \r\n          <DicePiece key={id} data={[el[0], el[1]]}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { DicePiece } from \"./Dice\"\r\nimport { Dice } from \"../types\"\r\nimport { useState } from \"react\"\r\n\r\nexport const Pile = ({ diceData }: { diceData: Dice[] }) => {\r\n  const [opened, setOpened] = useState(true);\r\n  \r\n  return (\r\n    <div className=\"pile\">\r\n      <h3 className=\"pile__text\" onClick={() => {setOpened(!opened)}}>Pile:</h3>\r\n      <div className={opened ? \"\" : \"pile__dice__hidden\"}>\r\n        {diceData.map((el, id) => \r\n          <DicePiece key={id} data={[el[0], el[1]]}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { playerMove } from \"../store/dominoSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { Dice } from \"../types\";\r\nimport { DicePiece } from \"./Dice\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const Player = ({ id, diceData }: { id: number; diceData: Dice[] }) => {\r\n  const { playerTurn, isGameOver, speed, isPaused } = useAppSelector(\r\n    ({ dominoSlice: toolkit }) => {\r\n      return {\r\n        playerTurn: toolkit.playerTurn,\r\n        isGameOver: toolkit.isGameOver,\r\n        speed: toolkit.moveSpeed,\r\n        isPaused: toolkit.isGamePaused,\r\n      };\r\n    }\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isGameOver && !isPaused)\r\n      if (playerTurn.id === id) {\r\n        setTimeout(() => {\r\n          dispatch(playerMove({ id: id, dice: diceData }));\r\n        }, speed);\r\n      }\r\n  }, [playerTurn, isPaused]);\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <p className=\"player__number\">Player: {id}</p>\r\n      <span className=\"player__separator\"></span>\r\n      <div className=\"player__dice\">\r\n        {diceData.map((el, id) => (\r\n          <DicePiece key={id} data={[el[0], el[1]]} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const Message = ({text}:{text:string}) => {\r\n  return (\r\n    <h3 className=\"game-text\">\r\n      {text}\r\n    </h3>\r\n  )\r\n}","import { useState } from \"react\";\r\nimport {\r\n  changePlayers,\r\n  changeSpeed,\r\n  pauseGame,\r\n  resetGame,\r\n  startGame,\r\n} from \"../store/dominoSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\n\r\nexport const Settings = ({\r\n  playersAmount,\r\n  isGameOver,\r\n}: {\r\n  playersAmount: number;\r\n  isGameOver: boolean;\r\n}) => {\r\n  const { speed, isPaused, delay } = useAppSelector(\r\n    ({ dominoSlice: toolkit }) => {\r\n      return {\r\n        speed: toolkit.moveSpeed,\r\n        isPaused: toolkit.isGamePaused,\r\n        delay: toolkit.moveSpeed,\r\n      };\r\n    }\r\n  );\r\n\r\n  const [opened, setOpened] = useState(true);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const playersInputChange = (e: any) => {\r\n    dispatch(changePlayers(e.target.value));\r\n  };\r\n  const speedInputChange = ({ target }: { target: HTMLInputElement }) => {\r\n    dispatch(changeSpeed(target.value));\r\n  };\r\n  const pauseBtnClick = () => {\r\n    dispatch(pauseGame());\r\n  };\r\n  const startBtnClick = () => {\r\n    if (isGameOver) {\r\n      dispatch(startGame());\r\n    } else {\r\n      dispatch(pauseGame());\r\n      setTimeout(() => {\r\n        dispatch(resetGame());\r\n      }, delay);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"settings\">\r\n      <p className=\"settings__title\" onClick={() => {setOpened(!opened)}}>\r\n        Settings\r\n      </p>\r\n      <div className={opened ? \"\" : \"settings_hidden\"}>\r\n        <p>Amount of players: {playersAmount}</p>\r\n        <input\r\n          disabled={!isGameOver}\r\n          onChange={playersInputChange}\r\n          type=\"range\"\r\n          className=\"settings__input\"\r\n          min=\"2\"\r\n          max=\"5\"\r\n          defaultValue={playersAmount}\r\n        />\r\n        <p>Time for move: {speed / 1000} sec</p>\r\n        <input\r\n          className=\"settings__input\"\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"5000\"\r\n          defaultValue={speed}\r\n          onChange={speedInputChange}\r\n        />\r\n        <div className=\"settings__buttons\">\r\n          <button\r\n            className=\"settings__buttons__button\"\r\n            disabled={isGameOver}\r\n            onClick={pauseBtnClick}\r\n          >\r\n            {isPaused ? \"Resume game\" : \"Pause game\"}\r\n          </button>\r\n          <button className=\"settings__buttons__button\" onClick={startBtnClick}>\r\n            {isGameOver ? \"Start game\" : \"Reset game\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"../assets/styles/index.css\"\r\nimport { Table } from \"./Table\";\r\nimport { Pile } from \"./Pile\";\r\nimport { Player } from \"./Player\";\r\nimport { Message } from \"./Message\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { useEffect } from \"react\";\r\nimport { initFill } from \"../store/dominoSlice\";\r\nimport { Settings } from \"./Settings\";\r\n\r\nfunction App() {\r\n  const {pile, playersAmount, players, table, message, isGameOver} = useAppSelector(({dominoSlice: toolkit}) => {\r\n    return {\r\n      pile: toolkit.pile, \r\n      playersAmount: toolkit.playersAmount,\r\n      players: toolkit.players, \r\n      table: toolkit.table, \r\n      message: toolkit.message,\r\n      isGameOver: toolkit.isGameOver\r\n    }\r\n  })\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (isGameOver)\r\n      dispatch(initFill())\r\n  }, [isGameOver, playersAmount])\r\n  return (\r\n    <>\r\n      <Table diceData={table}/>\r\n      <Settings playersAmount={playersAmount} isGameOver={isGameOver}/>\r\n      <Pile diceData={pile}/>\r\n      <Message text={message}/>\r\n      <div className=\"players\">\r\n        {players.map((el, id) => \r\n          <Player key={id} id={el.id} diceData={el.dice}/>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport { store } from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementsByClassName('root')[0]\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}