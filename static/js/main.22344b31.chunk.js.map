{"version":3,"sources":["store/reduxFunctions/diceFunctions.ts","store/reduxFunctions/playerFunctions.ts","store/dominoSlice.ts","store/reduxFunctions/gameFunctions.ts","store/store.ts","components/Dice.tsx","components/Table.tsx","components/Pile.tsx","store/hooks.ts","components/Player.tsx","components/Message.tsx","components/Settings.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["getHighestDice","dices","newDices","map","el","Math","max","getRandomDice","pile","min","dieN","length","trunc","random","ret","splice","pickDice","player","dice","push","pickDices","players","cardsAmount","i","forEach","findAvailable","available","find","availableNumbers","allDetails","dominoSlice","createSlice","name","initialState","playersAmount","id","table","message","playerQueue","playerTurn","isGameOver","isGamePaused","skipCount","moveSpeed","reducers","initFill","state","j","newDice","fillPile","fillPlayers","sort","a","b","changePlayers","payload","startGame","playerMove","switchPlayer","nextPlayerId","indexOf","undefined","currPlayer","availableDice","availableDiceID","concat","newTable","availableNums","allVariants","unshift","addToTable","JSON","stringify","alert","changeSpeed","pauseGame","actions","rootReducer","combineReducers","store","configureStore","reducer","DicePiece","data","first","second","className","Array","fill","Table","diceData","Pile","useAppDispatch","useDispatch","useAppSelector","useSelector","Player","toolkit","speed","isPaused","dispatch","useEffect","setTimeout","Message","text","Settings","disabled","onChange","e","target","value","type","defaultValue","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementsByClassName"],"mappings":"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","file":"static/js/main.22344b31.chunk.js","sourcesContent":["import { Dice } from '../../types';\n\nexport const getRandom = (max:number, min:number):number => Math.trunc(Math.random() * (max - min) + min);\n\nexport const getHighestDice = (dices:Dice[]):number => {\n  const newDices = dices.map((el) => el[0] + el[1]);\n  return Math.max(...newDices);\n};\n\nexport const getRandomDice = (pile:Dice[]):Dice => {\n  const dieN = getRandom(pile.length, 0);\n  const ret = pile[dieN];\n  pile.splice(dieN, 1);\n  return ret;\n};\n","import { Dice, Player, Available, Pile } from '../../types';\nimport { getRandomDice } from './diceFunctions';\n\nexport const fillPlayers = (playersAmount:number, pile:Pile):Player[] => {\n  const players:Player[] = [];\n  for (let i = 0; i < playersAmount; i++) {\n    players.push({\n      id: i,\n      dice: [],\n    });\n  }\n  const cardsAmount = playersAmount < 4 ? 7 : 5;\n  pickDices(players, pile, cardsAmount);\n  return players;\n};\n\nconst pickDice = (player:Player, pile:Dice[]):void => {\n  player.dice.push(getRandomDice(pile));\n};\n\nconst pickDices = (players:Player[], pile:Dice[], cardsAmount:number):void => {\n  for (let i = 0; i < cardsAmount; i++) {\n    players.forEach((el) => pickDice(el, pile));\n  }\n};\n\nexport const findAvailable = (available:Available, dice:Dice[]):Dice | undefined => {\n  return dice.find(el => (el[0] === available[0]\n      || el[0] === available[1]\n      || el[1] === available[0]\n      || el[1] === available[1]))\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Available, Dice, Player } from \"../types\";\r\nimport { getHighestDice, getRandomDice } from \"./reduxFunctions/diceFunctions\";\r\nimport { fillPile } from \"./reduxFunctions/gameFunctions\";\r\nimport { fillPlayers, findAvailable } from \"./reduxFunctions/playerFunctions\";\r\n\r\nconst availableNumbers = (allDetails: Dice[]):Available => {\r\n  const leftAvailablePlace = allDetails[0][0];\r\n  const rightAvailablePlace = allDetails[allDetails.length - 1][1];\r\n  return [leftAvailablePlace, rightAvailablePlace];\r\n}\r\n\r\nconst addToTable = (table:Dice[], dice:Dice):Dice[] => {\r\n  const newTable = table;\r\n  const availableNums = availableNumbers(table);\r\n  const reversedDice:Dice = [dice[1], dice[0]];\r\n  const allVariants:Dice[] = [dice, reversedDice];\r\n  for (let i = 0; i < allVariants.length; i++) {\r\n    if (allVariants[i][0] === availableNums[1]) {\r\n      newTable.push(allVariants[i]);\r\n      break;\r\n    } else if (allVariants[i][1] === availableNums[0]) {\r\n      newTable.unshift(allVariants[i]);\r\n      break;\r\n    }\r\n  }\r\n  return newTable\r\n};\r\n\r\nconst dominoSlice = createSlice({\r\n  name: 'domino',\r\n  initialState: {\r\n    pile: [] as Dice[],\r\n    playersAmount: 2,\r\n    players: [{\r\n      id: 0,\r\n      dice: [] as Dice[]\r\n    }],\r\n    table: [] as Dice[],\r\n    message: '',\r\n    playerQueue: [] as number[],\r\n    playerTurn: {id: 0},\r\n    isGameOver: true,\r\n    isGamePaused: false,\r\n    skipCount: 0,\r\n    moveSpeed: 1500\r\n  },\r\n  reducers: {\r\n    initFill(state) {\r\n      state.pile = fillPile()\r\n      state.table = []\r\n      state.table.push(getRandomDice(state.pile))\r\n      state.players = fillPlayers(state.playersAmount, state.pile)\r\n      state.players.sort((a, b) => \r\n        getHighestDice(a.dice) < getHighestDice(b.dice) ? 1 : -1\r\n      );\r\n      state.playerQueue = state.players.map(el => el.id);\r\n      state.message = 'Everything is up and ready'\r\n    },\r\n    changePlayers(state, {payload}) {\r\n      state.playersAmount = payload\r\n    },\r\n    startGame(state) {\r\n      state.isGameOver = !state.isGameOver\r\n      state.playerTurn = {id: state.playerQueue[0]}      \r\n    },\r\n    playerMove(state, {payload}) {\r\n      const switchPlayer = () => {\r\n        const nextPlayerId = state.playerQueue.indexOf(state.playerTurn.id) + 1\r\n        state.playerTurn = {id: state.playerQueue[nextPlayerId]}\r\n\r\n        if (state.playerTurn.id === undefined) {\r\n          state.playerTurn = {id: state.playerQueue[0]}      \r\n        }\r\n      }\r\n\r\n      const currPlayer = state.players[state.playerQueue.indexOf(state.playerTurn.id)]\r\n      let availableDice = findAvailable(availableNumbers(state.table), payload.dice);      \r\n      if (!availableDice) {\r\n        if (state.pile.length === 0) {\r\n          state.message = `Pile now is empty, player ${payload.id}'s skipping`;\r\n          state.skipCount++ \r\n          if (state.skipCount === state.players.length) {\r\n            state.isGamePaused = true\r\n            alert(`No legal moves! Draw!`)\r\n          }\r\n          switchPlayer()\r\n        } else {\r\n          const newDice = payload.dice.concat();\r\n          newDice.unshift(getRandomDice(state.pile));\r\n          currPlayer.dice = newDice\r\n  \r\n          state.message = `Player ${payload.id} picked ${JSON.stringify(payload.dice[0])}`;\r\n          availableDice = findAvailable(availableNumbers(state.table), payload.dice);\r\n          state.playerTurn = {id: currPlayer.id}\r\n        }\r\n      } else {\r\n        const availableDiceID = payload.dice.indexOf(availableDice);    \r\n\r\n        const newDice = payload.dice.concat()\r\n        newDice.splice(availableDiceID, 1)\r\n        currPlayer.dice = newDice;\r\n\r\n        state.table = addToTable(state.table, availableDice as Dice);\r\n        state.message = `Player ${payload.id} played ${JSON.stringify(availableDice)}`;\r\n        state.skipCount = 0\r\n\r\n        if (currPlayer.dice.length === 0) {\r\n          state.isGamePaused = true\r\n          alert(`Player ${payload.id} wins!`)\r\n        }\r\n\r\n        switchPlayer()\r\n      }\r\n    },\r\n    changeSpeed(state, {payload}) {\r\n      state.moveSpeed = 5000 - payload\r\n    },\r\n    pauseGame(state) {\r\n      state.isGamePaused = !state.isGamePaused\r\n    }\r\n  }\r\n})\r\n\r\nexport default dominoSlice.reducer\r\nexport const {initFill, changePlayers, startGame, playerMove, changeSpeed, pauseGame} = dominoSlice.actions","import {\n  Dice,\n} from '../../types';\n// import { getRandomDice } from './diceFunctions';\n// import { findAvailable } from './playerFunctions';\n\nexport const fillPile = ():Dice[] => {\n  const pile:Dice[] = [];\n  for (let i = 0; i <= 6; i++) {\n    for (let j = 0; j <= i; j++) {\n      const newDice:Dice = [i, j];\n      pile.push(newDice);\n    }\n  }\n  return pile;\n};\n // const playerMove = (player:Player, table:Dice[], pile:Pile):Promise<boolean> => new Promise(resolve => {\n      //   let availableDice = findAvailable(availableNumbers(table), player.dice);\n      //   if (!availableDice) {\n      //     while (!availableDice) {\n      //       if (pile.length === 0) {\n      //         state.message = `Pile now is empty, player ${player.id}'s skipping`;\n      //         resolve(true);\n      //       }\n      //       player.dice.unshift(getRandomDice(pile));\n      //       state.message = `Player ${player.id} picked ${JSON.stringify(player.dice[0])}`;\n      //       availableDice = findAvailable(availableNumbers(table), player.dice);\n      //     }\n      //   }\n      //   const availableDiceID = player.dice.indexOf(availableDice);\n      //   player.dice.splice(availableDiceID, 1);\n      //   addToTable(table, availableDice);\n      //   state.message = `Player ${player.id} played ${JSON.stringify(availableDice)}`;\n      //   resolve(false);\n      // });\n\n      // let skipCount = 0\n\n      // while (!state.isGameOver) {\n      //   for (let i = 0; i < state.players.length; i++) {\n      //     const isSkip = playerMove(state.players[i], state.table, state.pile);\n      //     isSkip.then(isSkip => {\n      //       console.log(isSkip);\n      //       if (isSkip) {\n      //         skipCount++;\n      //         if (skipCount === state.players.length) {\n      //           state.message = 'Draw!!';\n      //           state.isGameOver = true;\n      //         }\n      //       } else if (state.players[i].dice.length === 0) {\n      //         state.message = `Player ${state.players[i].id + 1} wins!!`;\n      //         state.isGameOver = true;\n      //       } else {\n      //         skipCount = 0;\n      //       }\n      //     })\n      //   }\n      // }\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport dominoSlice from './dominoSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  dominoSlice: dominoSlice\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import { Dice } from \"../types\"\r\n\r\nexport const DicePiece = ({data: [first, second]}:{data: Dice}) => {\r\n  return (\r\n    <div className=\"dice\">\r\n      <div className=\"dice__dots\">\r\n        {new Array(first).fill(<span className=\"dice__dots__dot\"></span>)}\r\n      </div>\r\n      <span className=\"dice__separator\"></span>\r\n      <div className=\"dice__dots\">\r\n        {new Array(second).fill(<span className=\"dice__dots__dot\"></span>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { DicePiece } from \"./Dice\"\r\nimport { Dice } from \"../types\"\r\n\r\nexport const Table = ({diceData}:{diceData: Dice[]}) => {\r\n  return (\r\n    <div className=\"table\">\r\n      <h3 className=\"table__text\">Table:</h3>\r\n      <div className=\"table__dice\">\r\n        {diceData.map((el, id) => \r\n          <DicePiece key={id} data={[el[0], el[1]]}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { DicePiece } from \"./Dice\"\r\nimport { Dice } from \"../types\"\r\n\r\nexport const Pile = ({diceData}:{diceData: Dice[]}) => {\r\n  return (\r\n    <div className=\"pile\">\r\n      <h3 className=\"pile__text\">Pile:</h3>\r\n      <div className=\"pile__dice\">\r\n        {diceData.map((el, id) => \r\n          <DicePiece key={id} data={[el[0], el[1]]}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { playerMove } from \"../store/dominoSlice\"\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\"\r\nimport { Dice } from \"../types\"\r\nimport { DicePiece } from \"./Dice\"\r\nimport { useEffect } from \"react\"\r\n\r\nexport const Player = ({id, diceData}:{id: number, diceData: Dice[]}) => {\r\n  const {playerTurn, isGameOver, speed, isPaused} = useAppSelector(({dominoSlice: toolkit}) => {\r\n    return {\r\n      playerTurn: toolkit.playerTurn,\r\n      isGameOver: toolkit.isGameOver,\r\n      speed: toolkit.moveSpeed,\r\n      isPaused: toolkit.isGamePaused\r\n    }\r\n  })\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isGameOver && !isPaused)\r\n      if (playerTurn.id === id) {    \r\n        setTimeout(() => {\r\n          dispatch(playerMove({id: id, dice: diceData}))\r\n        }, speed)\r\n      }\r\n  }, [playerTurn, isPaused])\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <p className=\"player__number\">Player: {id}</p>\r\n      <span className=\"player__separator\"></span>\r\n      <div className=\"player__dice\">\r\n        {diceData.map((el, id) => \r\n          <DicePiece key={id} data={[el[0], el[1]]}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","export const Message = ({text}:{text:string}) => {\r\n  return (\r\n    <h3 className=\"game-text\">\r\n      {text}\r\n    </h3>\r\n  )\r\n}","import { changePlayers, changeSpeed, pauseGame, startGame } from \"../store/dominoSlice\"\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\"\r\n\r\nexport const Settings = ({playersAmount, isGameOver}:{playersAmount:number, isGameOver:boolean}) => {\r\n  const {speed, isPaused} = useAppSelector(({dominoSlice: toolkit}) => {\r\n    return {speed: toolkit.moveSpeed, isPaused: toolkit.isGamePaused}\r\n  })\r\n  const dispatch = useAppDispatch()\r\n  const playersInputChange = (e: any) => {\r\n    dispatch(changePlayers(e.target.value))\r\n  }\r\n  const speedInputChange = ({target}:{target:HTMLInputElement}) => {\r\n    dispatch(changeSpeed(target.value))\r\n  }\r\n  const pauseBtnClick = () => {\r\n    dispatch(pauseGame())\r\n  }\r\n  const startBtnClick = () => {\r\n    dispatch(startGame())\r\n  }\r\n  return (\r\n    <div className=\"settings\">\r\n      <p>Amount of players: {playersAmount}</p>\r\n      <input \r\n        disabled={!isGameOver}\r\n        onChange={playersInputChange}\r\n        type='range' \r\n        className=\"settings__input\" \r\n        min=\"2\" \r\n        max=\"5\" \r\n        defaultValue={playersAmount} />\r\n      <p>Time for move: {speed / 1000} sec</p>\r\n      <input  \r\n        className=\"settings__input\" \r\n        type=\"range\" \r\n        min=\"0\" \r\n        max=\"5000\" \r\n        defaultValue={1500} \r\n        onChange={speedInputChange}/>\r\n      <div className=\"settings__buttons\">\r\n        <button \r\n          className=\"settings__buttons__button\"\r\n          disabled={isGameOver}\r\n          onClick={pauseBtnClick}>\r\n          {isPaused ? 'Resume game' : 'Pause game'}\r\n        </button>\r\n        <button \r\n          className=\"settings__buttons__button\"\r\n          onClick={startBtnClick}>\r\n          {isGameOver ? 'Start game' : 'Reset game'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import \"../assets/styles/index.css\"\r\nimport { Table } from \"./Table\";\r\nimport { Pile } from \"./Pile\";\r\nimport { Player } from \"./Player\";\r\nimport { Message } from \"./Message\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { useEffect } from \"react\";\r\nimport { initFill } from \"../store/dominoSlice\";\r\nimport { Settings } from \"./Settings\";\r\n\r\nfunction App() {\r\n  const {pile, playersAmount, players, table, message, isGameOver} = useAppSelector(({dominoSlice: toolkit}) => {\r\n    return {\r\n      pile: toolkit.pile, \r\n      playersAmount: toolkit.playersAmount,\r\n      players: toolkit.players, \r\n      table: toolkit.table, \r\n      message: toolkit.message,\r\n      isGameOver: toolkit.isGameOver\r\n    }\r\n  })\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (isGameOver)\r\n      dispatch(initFill())\r\n  }, [isGameOver, playersAmount])\r\n  return (\r\n    <>\r\n      <Table diceData={table}/>\r\n      <Settings playersAmount={playersAmount} isGameOver={isGameOver}/>\r\n      <Pile diceData={pile}/>\r\n      <Message text={message}/>\r\n      <div className=\"players\">\r\n        {players.map((el, id) => \r\n          <Player key={id} id={el.id} diceData={el.dice}/>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport { store } from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementsByClassName('root')[0]\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}